from fastapi import Path
from fastapi import APIRouter, HTTPException
from mysql.connector import Error
from pydantic import BaseModel
from models.database import Database
from typing import  Optional

router = APIRouter()

ALLOWED_TABLES = {"btc", "eth", "xrp", "bnb", "sol", "usdc", "doge", "ada", "trx"}

class TickerModel(BaseModel):
    high: Optional[float]
    low: Optional[float]
    vol: Optional[float]
    last: Optional[float]
    buy: Optional[float]
    sell: Optional[float]
    date: int  # Obrigatório para identificar qual registro atualizar

# DELETE - Remove um ticker de uma moeda
def generate_ticker_delete_route(table_name: str):
    route_path = f"/{table_name}/ticker/{{date}}"

    @router.delete(route_path)
    def delete_ticker(date: int = Path(..., description="Timestamp único do ticker")):
        db = Database()
        db.conectar()
        try:
            if table_name not in ALLOWED_TABLES:
                raise HTTPException(status_code=400, detail="Moeda inválida")

            sql = f"DELETE FROM {table_name} WHERE date = %s"
            values = (date, )

            rows_affected = db.executar(sql, values)
            if rows_affected == 0:
                raise HTTPException(status_code=404, detail="Ticker não encontrado")
            return {"message": f"Ticker com date {date} removido de {table_name} com sucesso."}
        except Error as e:
            raise HTTPException(status_code=500, detail=f"Erro ao deletar dados: {e}")
        finally:
            db.desconectar()