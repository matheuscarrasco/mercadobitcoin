from fastapi import APIRouter, HTTPException
from mysql.connector import Error
from pydantic import BaseModel
from models.database import Database
from typing import List
from fastapi import Path

router = APIRouter()

# Modelo reutilizável para qualquer moeda
class TickerModel(BaseModel):
    high: float
    low: float
    vol: float
    last: float
    buy: float
    sell: float
    date: int

# Lista segura de moedas permitidas (nome das tabelas)
ALLOWED_TABLES = {"btc", "eth", "xrp", "bnb", "sol", "usdc", "doge", "ada", "trx"}

# GET - Consulta dados
def generate_ticker_get_route(table_name: str):
    route_path = f"/{table_name}/ticker"

    @router.get(route_path, response_model=List[TickerModel])
    def get_ticker():
        db = Database()
        db.conectar()
        try:
            if table_name not in ALLOWED_TABLES:
                raise HTTPException(status_code=400, detail="Moeda inválida")

            sql = f"SELECT high, low, vol, last, buy, sell, date FROM {table_name}"
            result = db.consultar(sql)
            if result is None:
                raise HTTPException(status_code=404, detail="Nenhum dado encontrado")
            return result
        except Error as e:
            raise HTTPException(status_code=500, detail=f"Erro: {e}")
        finally:
            db.desconectar()

# POST - Inserir ou atualizar dados
def generate_ticker_post_route(table_name: str):
    route_path = f"/{table_name}/ticker"

    @router.post(route_path)
    def post_ticker(data: TickerModel):
        db = Database()
        db.conectar()
        try:
            if table_name not in ALLOWED_TABLES:
                raise HTTPException(status_code=400, detail="Moeda inválida")

            sql = f"""
                INSERT INTO {table_name} (high, low, vol, last, buy, sell, date)
                VALUES (%s, %s, %s, %s, %s, %s, %s)
                ON DUPLICATE KEY UPDATE
                    high = VALUES(high),
                    low = VALUES(low),
                    vol = VALUES(vol),
                    last = VALUES(last),
                    buy = VALUES(buy),
                    sell = VALUES(sell)
            """

            values = (
                data.high, data.low, data.vol,
                data.last, data.buy, data.sell,
                data.date
            )

            db.executar(sql, values)
            return {"message": f"Ticker de {table_name} inserido/atualizado com sucesso."}
        except Error as e:
            raise HTTPException(status_code=500, detail=f"Erro ao inserir dados: {e}")
        finally:
            db.desconectar()


# PUT - Atualizar dados parcial ou total de um ticker
def generate_ticker_put_route(table_name: str):
    route_path = f"/{table_name}/ticker"

    @router.put(route_path)
    def put_ticker(data: TickerModel):
        db = Database()
        db.conectar()
        try:
            if table_name not in ALLOWED_TABLES:
                raise HTTPException(status_code=400, detail="Moeda inválida")

            # Montar dinamicamente os campos que serão atualizados
            fields_to_update = []
            values = []

            for field in ["high", "low", "vol", "last", "buy", "sell"]:
                value = getattr(data, field)
                if value is not None:
                    fields_to_update.append(f"{field} = %s")
                    values.append(value)

            if not fields_to_update:
                raise HTTPException(status_code=400, detail="Nenhum campo para atualizar")

            update_fields = ", ".join(fields_to_update)
            values.append(data.date)  # WHERE date = ?

            sql = f"""
                UPDATE {table_name}
                SET {update_fields}
                WHERE date = %s
            """

            rows_affected = db.executar(sql, tuple(values))
            if rows_affected == 0:
                raise HTTPException(status_code=404, detail="Registro não encontrado para atualizar")
            return {"message": f"Ticker de {table_name} atualizado com sucesso."}
        except Error as e:
            raise HTTPException(status_code=500, detail=f"Erro ao atualizar dados: {e}")
        finally:
            db.desconectar()

# DELETE - Remove um ticker de uma moeda
def generate_ticker_delete_route(table_name: str):
    route_path = f"/{table_name}/ticker/{{date}}"

    @router.delete(route_path)
    def delete_ticker(date: int = Path(..., description="Timestamp único do ticker")):
        db = Database()
        db.conectar()
        try:
            if table_name not in ALLOWED_TABLES:
                raise HTTPException(status_code=400, detail="Moeda inválida")

            sql = f"DELETE FROM {table_name} WHERE date = %s"
            values = (date, )

            rows_affected = db.executar(sql, values)
            if rows_affected == 0:
                raise HTTPException(status_code=404, detail="Ticker não encontrado")
            return {"message": f"Ticker com date {date} removido de {table_name} com sucesso."}
        except Error as e:
            raise HTTPException(status_code=500, detail=f"Erro ao deletar dados: {e}")
        finally:
            db.desconectar()


# Criar rotas para todas as moedas permitidas
for symbol in ALLOWED_TABLES:
    generate_ticker_get_route(symbol)
    generate_ticker_post_route(symbol)
    generate_ticker_put_route(symbol)
    generate_ticker_delete_route(symbol)